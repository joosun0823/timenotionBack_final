<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.geungeunhanjan.mapper.admin.admin_boardListMapper">

    <!--  update  -->

    <!-- 나의 일대기 게시글 수정 -->
    <update id="updateBoard" parameterType="BoardVO">
        UPDATE GGHJ_BOARD
        SET BOARD_TITLE = #{boardTitle},
            BOARD_CONTENT = #{boardContent},
            BOARD_PUBLIC = #{boardPublic},
            BOARD_UPDATED_DATE = SYSDATE
        WHERE BOARD_ID = #{boardId}
    </update>

    <!-- 특정 글 조회수 -->
    <update id="incViewCnt" flushCache="true" >
        UPDATE GGHJ_BOARD
        SET BOARD_VIEW_COUNT = BOARD_VIEW_COUNT + 1
        WHERE BOARD_ID = #{boardId}
    </update>

    <!--  delete  -->

    <!--  좋아요 삭제  -->
    <delete id="deleteLike" parameterType="Long">
        DELETE
        FROM GGHJ_LIKE
        WHERE LIKE_ID = #{likeId}
    </delete>

    <!-- 게시글 삭제 -->
    <delete id="deleteBoard" parameterType="Long">
        DELETE
        FROM GGHJ_BOARD
        WHERE BOARD_ID = #{boardId}
    </delete>

    <!--  select  -->

    <!-- 모두의 일대기 게시판 글 -->
    <select id="everyLifeBoardbyViews" resultType="BoardVO">
        SELECT BOARD_ID, BOARD_TITLE, BOARD_CONTENT, BOARD_CREATED_DATE, BOARD_VIEW_COUNT, BOARD_LIKE_COUNT, BOARD_YEAR, USER_ID
        FROM GGHJ_BOARD
        WHERE rownum BETWEEN 1 AND 100
        ORDER BY BOARD_VIEW_COUNT DESC
    </select>

    <!--모두의 일대기 리스트 + 페이징 -->
    <select id="everyLifeagepaging" resultType="BoardDTO" parameterType="Criteria">
    <![CDATA[
        SELECT BOARD_TITLE, BOARD_CREATED_DATE, BOARD_VIEW_COUNT, BOARD_CONTENT,
               NICKNAME, USER_FILE_PROFILE_NAME, USER_FILE_PROFILE_SOURCE, USER_FILE_PROFILE_UUID,
               BOARD_ID, USER_ID
        FROM (
                 SELECT RNUM, BOARD_TITLE, BOARD_CREATED_DATE, BOARD_VIEW_COUNT, BOARD_CONTENT,
                        NICKNAME, USER_FILE_PROFILE_NAME, USER_FILE_PROFILE_SOURCE, USER_FILE_PROFILE_UUID,
                        BOARD_ID, USER_ID
                 FROM (
                          SELECT ROWNUM AS RNUM, BOARD_TITLE, BOARD_CREATED_DATE, BOARD_VIEW_COUNT, BOARD_CONTENT,
                                 NICKNAME, USER_FILE_PROFILE_NAME, USER_FILE_PROFILE_SOURCE, USER_FILE_PROFILE_UUID,
                                 BOARD_ID, USER_ID
                          FROM (
                                   SELECT BOARD_TITLE, BOARD_CREATED_DATE, BOARD_VIEW_COUNT, BOARD_CONTENT,
                                          COALESCE(U.USER_NICKNAME, K.NAME) AS NICKNAME,
                                          F.USER_FILE_PROFILE_NAME,
                                          F.USER_FILE_PROFILE_SOURCE,
                                          F.USER_FILE_PROFILE_UUID,
                                          B.BOARD_ID,
                                          B.USER_ID
                                   FROM GGHJ_BOARD B
                                            JOIN GGHJ_UNI UNI ON B.USER_ID = UNI.UNI_ID
                                            LEFT JOIN GGHJ_USER U ON UNI.USER_ID = U.USER_ID
                                            LEFT JOIN GGHJ_KAKAO K ON UNI.KAKAO_ID = K.KAKAO_ID
                                            LEFT JOIN GGHJ_USER_FILE F ON U.USER_ID = F.USER_ID
                                   WHERE U.USER_NICKNAME LIKE '%' || #{keyword} || '%'
                                      OR B.BOARD_TITLE LIKE '%' || #{keyword} || '%'
                                   ORDER BY BOARD_CREATED_DATE DESC
                               )
                          WHERE ROWNUM <= #{page} * #{amount}
                      )
                 WHERE RNUM > (#{page} - 1) * #{amount}
             )
        ]]>
    </select>

    <select id="everyLifeFindTotal">
        SELECT COUNT(*)FROM GGHJ_BOARD
    </select>

    <!--     최신 게시판 정렬 -->
    <select id="postarrayLatest" resultType="BoardDTO">
        SELECT
            *
        FROM
            GGHJ_BOARD b JOIN GGHJ_USER u
                              ON u.user_id = b.USER_ID
        ORDER BY
            b.BOARD_CREATED_DATE DESC
    </select>

    <!--    내가 쓴 게시물의 상세페이지로 들어가기-->
    <select id="selectById" resultType="BoardVO">
        SELECT *
        FROM GGHJ_BOARD G
                 JOIN GGHJ_UNI U
                      ON G.USER_ID = U.UNI_ID
        WHERE G.BOARD_ID = #{boardId}
    </select>

    <!-- 나의 일대기 게시판 정보 불러오기 -->
    <select id="selectBoard" resultType="BoardVO">
        SELECT *
        FROM GGHJ_BOARD
        WHERE USER_ID = #{userId}
        ORDER BY BOARD_ID DESC
    </select>

    <!--  게시글 작성자의 닉네임  -->
    <select id="boardUserName" parameterType="Long" resultType="String">
        SELECT
            COALESCE(u.USER_NICKNAME, k.NAME) AS user_nickname
        FROM
            GGHJ_BOARD b
                LEFT JOIN GGHJ_UNI gu ON b.USER_ID = gu.UNI_ID
                LEFT JOIN GGHJ_USER u ON gu.USER_ID = u.USER_ID
                LEFT JOIN GGHJ_KAKAO k ON gu.KAKAO_ID = k.KAKAO_ID
        WHERE
            b.BOARD_ID = #{boardId}
    </select>

    <!--  프로필 가져오기  -->
    <select id="getProfile" resultType="BoardDTO">
        SELECT BOARD_TITLE, BOARD_CREATED_DATE, BOARD_VIEW_COUNT, BOARD_CONTENT,
               COALESCE(U.USER_NICKNAME, K.NAME) AS NICKNAME,
               F.USER_FILE_PROFILE_NAME,
               F.USER_FILE_PROFILE_SOURCE,
               F.USER_FILE_PROFILE_UUID,
               B.BOARD_ID,
               B.USER_ID
        FROM GGHJ_BOARD B
                 JOIN GGHJ_UNI UNI ON B.USER_ID = UNI.UNI_ID
                 LEFT JOIN GGHJ_USER U ON UNI.USER_ID = U.USER_ID
                 LEFT JOIN GGHJ_KAKAO K ON UNI.KAKAO_ID = K.KAKAO_ID
                 LEFT JOIN GGHJ_USER_FILE F ON UNI.UNI_ID = F.USER_ID
        WHERE B.USER_ID = #{userId}
        ORDER BY B.BOARD_CREATED_DATE DESC
    </select>

    <!-- 게시판 작성자의 생일 가져오기  -->
    <select id="selectUserBirth" resultType="java.time.LocalDateTime">
        SELECT
            CASE
                WHEN u.USER_ID IS NOT NULL THEN u.USER_BIRTH
                --                 WHEN k.KAKAO_ID IS NOT NULL THEN k.KAKAO_BIRTH
--                 ELSE NULL -- 유저 또는 카카오 회원이 없을 경우
                END AS BIRTHDAY
        FROM
            GGHJ_UNI uni
                LEFT JOIN
            GGHJ_USER u ON uni.USER_ID = u.USER_ID
        --                 LEFT JOIN
--             GGHJ_KAKAO k ON uni.KAKAO_ID = k.KAKAO_ID
        WHERE
            uni.UNI_ID = #{uniId}
    </select>
</mapper>